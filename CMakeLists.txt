cmake_minimum_required(VERSION 3.20)
project(native_libs LANGUAGES C CXX)

set(BUILD_SHARED_LIBS ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(NATIVE_UNIVERSAL "Build universal (arm64;x86_64) binaries on macOS" OFF)
if (APPLE AND NATIVE_UNIVERSAL)
    set(CMAKE_OSX_ARCHITECTURES "arm64;x86_64" CACHE STRING "" FORCE)
endif ()

if (NOT DEFINED OUT_BASE)
    set(OUT_BASE "${CMAKE_SOURCE_DIR}/build/native")
endif ()

set(ARCH_TAG "")
if (APPLE)
    if (DEFINED CMAKE_OSX_ARCHITECTURES AND CMAKE_OSX_ARCHITECTURES MATCHES ";")
        set(ARCH_TAG "universal")
    elseif (DEFINED CMAKE_OSX_ARCHITECTURES AND NOT CMAKE_OSX_ARCHITECTURES STREQUAL "")
        set(ARCH_TAG "${CMAKE_OSX_ARCHITECTURES}")
    else ()
        set(ARCH_TAG "${CMAKE_SYSTEM_PROCESSOR}")
    endif ()
elseif (WIN32)
    set(_proc "${CMAKE_SYSTEM_PROCESSOR}")
    if (_proc MATCHES "^(AMD64|x86_64|x64)$")
        set(ARCH_TAG "x64")
    elseif (_proc MATCHES "^(ARM64|aarch64)$")
        set(ARCH_TAG "arm64")
    else ()
        set(ARCH_TAG "${_proc}")
    endif ()
else ()
    set(_proc "${CMAKE_SYSTEM_PROCESSOR}")
    if (_proc MATCHES "^(x86_64|amd64)$")
        set(ARCH_TAG "x86_64")
    elseif (_proc MATCHES "^(aarch64|arm64)$")
        set(ARCH_TAG "aarch64")
    elseif (_proc MATCHES "^armv7")
        set(ARCH_TAG "armv7")
    else ()
        set(ARCH_TAG "${_proc}")
    endif ()
endif ()

if (WIN32)
    set(PLATFORM_DIR "windows-${ARCH_TAG}")
elseif (APPLE)
    set(PLATFORM_DIR "macos-${ARCH_TAG}")
else ()
    set(PLATFORM_DIR "linux-${ARCH_TAG}")
endif ()

set(_OUT "${OUT_BASE}/${PLATFORM_DIR}")
foreach (kind RUNTIME LIBRARY ARCHIVE)
    set(CMAKE_${kind}_OUTPUT_DIRECTORY "${_OUT}")
    foreach (cfg Debug Release RelWithDebInfo MinSizeRel)
        set(CMAKE_${kind}_OUTPUT_DIRECTORY_${cfg} "${_OUT}")
    endforeach ()
endforeach ()

if (WIN32)
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif ()

add_library(lz4shim SHARED
        native/lz4/lib/lz4.c
        native/lz4/lib/lz4hc.c
)
target_include_directories(lz4shim PUBLIC native/lz4/lib)

if (CMAKE_C_COMPILER_ID MATCHES "Clang|AppleClang|GNU")
    target_compile_options(lz4shim PRIVATE -fvisibility=default)
endif ()
